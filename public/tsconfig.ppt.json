{
  "compilerOptions": {
    // 基础配置
    "target": "ES3", //指定 输出代码 ES 版本，可以是 ["es3", "es5", "es2015", "es2016", "es2017", “esnext"]
    "module": "commonjs", // 指定模块生成方式，["commonjs", "amd", "umd", "system", "es6", "es2015", "esnext", "none"]
    "lib": ["ES6","DOM","ScriptHost"], //指定TS编译需要引用的声明文件库
    "jsx": "react", // 指定在.tsx文件里支持JSX方式："React"或"Preserve"
    "jsxFactory": "React.createElement", // 指定生成目标为react JSX时使用的JSX工厂函数
    "allowJs": false, // 指定是否允许编译js文件
    "checkJs": false, // 指定是否报告js文件中的错误

    // 路径配置
    "outFile": "./app.js", // 指定module: amd|system时，将输出文件合并到一个文件中
    "outDir": "./dist", // 指定编译文件的输出文件夹
    "rootDir": "./src", // 指定编译文件的根目录、生成输出文件目录结构
    "rootDirs": ["./src","./public"], // 指定将多个文件夹目录放在一个虚拟文件夹目录下
    "baseUrl": ".", // 指定解析非相对模块的基地址，默认是当前目录
    "paths": {"@/*": ["src/*"] }, // 指定路径映射，与 baseUrl 一同定义模块查找的路径
    "typeRoots": ["node_modules/@types"], // 指定声明文件目录
    "types": ["jquery"], // 指定编译需要加载的声明文件包

    /* 模块解析配置 */
    "moduleResolution": "node", // 指定非相对路径模块的解析方式，["classic" : “node”] module === "AMD" or "System" or "ES6" ? "Classic" : "Node"
    "allowSyntheticDefaultImports": true, // 指定是否允许从没有设置默认导出的模块中默认导入，仅为了类型检查
    "esModuleInterop": true, // 通过为导入内容创建命名空间，允许export=导出，由import a from 'a' 导入
    "isolatedModules": false, // 指定是否所有文件都必须是模块; 与outFile不可同时指定

    /* 严格类型检验配置 */
    "alwaysStrict": false, // 是否在代码中注入'use strict'； module: commonjs 模块导出文件默认加入use strict
    "strict": false, // 是否开启所有严格的类型检查
    "noImplicitAny": false, // 是否不允许隐式的any类型
    "noImplicitThis": false, // 不允许this有隐式的any类型
    "strictNullChecks": false, // 不允许把null、undefined赋值给其他类型的变量 可以赋值给any
    "strictFunctionTypes": false, // 严格校验函数类型的变量参数类型
    "strictBindCallApply": false, // 严格校验bind/call/apply的参数类型
    "strictPropertyInitialization": false, // 必须初始化类的必选实例属性
    
    /* declaration sourceMap */
    "declaration": false, // 是否为ts生成相应的声明文件
    "declarationDir": "./dec", // 指定生成的声明文件的输出目录
    "declarationMap": false, // 指定是否生成声明文件的.map文件
    "emitDeclarationOnly": false, // 指定只生成ts的声明文件，而不会生成js文件
    "sourceMap": false, // 指定生成ts的.map文件，与inlineSourceMap互斥
    "inlineSourceMap": false, // 指定将sourceMap输出到目标文件的js文件中
    "inlineSources": false,  // 指定是否将ts源码生成到sourceMap的sourcesContent字段，需要同时设置 inlineSourceMap 或 sourceMap
    "sourceRoot": "../src", // 指定TypeScript源文件的根目录，以便调试器定位
    "mapRoot": "../dist",  // 为调试器指定map文件的根目录，而不是使用生成时的路径

    /* 额外检查(语法) */
    "noUnusedLocals": false, // 检查只声明、未使用的局部变量(只提示不报错)
    "noUnusedParameters": false, // 检查未使用的函数参数(只提示不报错)
    "noImplicitReturns": true, //每个分支都会有返回值
    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "forceConsistentCasingInFileNames": false, // 禁止对同一个文件的不一致的引用(文件名大小写)

    /**增量编译*/
    "composite": false, // 编译编译依赖
    "incremental": false, // 指定是否开启增量编译
    "tsBuildInfoFile": "./tsBuild", // 指定增量编译生成的文件

    // 文件输出配置
    "removeComments": false, // 删除注释
    "noEmit": false, // 不输出文件,即编译后不会生成任何js文件
    "noEmitOnError": false, // 发送错误时不输出任何文件
    "importHelpers": false, // 通过tslib引入helper函数，文件必须是模块
    "downlevelIteration": false, // 指定当 target 为 ES5 或 ES3 时，提供对遍历器会有降级的实现
    "preserveConstEnums": true, // 指定是否保留 const和 enum声明 在默认情况下，使用 const 修饰符后，枚举不会生成映射代码
    "preserveSymlinks": false, // 指定是否不把符号链接解析为其真实路径；将符号链接文件视为真正的文件
    "newLine": "lf", // 指定生成文件的行结束符： "crlf"（windows）或 "lf"（unix）。
    
    /* 实验性配置装饰器 */
    "experimentalDecorators": true, // 指定是否启用实验性的ES装饰器语法
    "emitDecoratorMetadata": false, // 指定给源码里的装饰器声明加上设计类型元数据（reflect-metadata）

    // 其他
    "allowUnreachableCode": false, // 不报告执行不到的代码错误
    "allowUnusedLabels": false, // 不报告未使用的标签错误
    "charset": "utf8", // 输入文件的字符集
    "disableSizeLimit": false, // 禁用JavaScript工程体积大小的限制
    "emitBOM": false, // 在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）
    "maxNodeModuleJsDepth": 0, // node_modules依赖的最大搜索深度并加载JavaScript文件; 仅适用于 --allowJs
    "noImplicitUseStrict": false, // 模块输出中不包含 "use strict"指令
    "noLib": false, // 不包含默认的库文件（ lib.d.ts）
    "noResolve":false, // 不把 /// <reference``>或模块导入的文件加到编译文件列表
    "noStrictGenericChecks": false, // 禁用在函数类型里对泛型签名进行严格检查
    "preserveWatchOutput": false, // 保留watch模式下过时的控制台输出
    "listEmittedFiles": false, // 打印输出文件
    "listFiles": false, // 编译过程中打印文件名
    "diagnostics": false, // 打印诊断信息
    "extendedDiagnostics": false, // 显示详细的诊段信息
    "traceResolution": false, // 指定是否生成模块解析日志信息
    "noErrorTruncation": false, // 不截短错误消息
  },
  "include": [
    "./src/**/*",
    "./public/**/*", // 如果编译器发现以rootDir的值作为根目录查找编译文件并不会把所有文件加载进去的话会报错，但是不会停止编译
  ], // 指定需要编译的文件或文件夹列表
  "exclude": [
    "node_modules",
    "./dist",
    "./dec",
    "./outFile",
    "./config",
  ], // 指定不需要编译的文件或文件夹列表
  // "files": ["./src/index.ts"], // 指定待编译的单个文件列表
  // "extends": "./public/tsconfig.json", // 引入其他配置文件继承配置; 在原文件里的配置先被加载，然后被来至继承文件里的配置重写

  // "references": [{
  //   "path": "./public",
  //   "prepend": true,
  // }], // 指定依赖工程
  
  // "typeAcquisition": {
  //   "enable": false,
  //   "exclude": ["jquery"],
  //   "include": ["jest"]
  // }, // 指定引入库类型定义文件相关
}