{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5", // 输出代码 ES 版本，可以是 ["es3", "es5", "es2015", "es2016", "es2017", "esnext"]
    "module": "amd", // 模块生成方式，["commonjs", "amd", "umd", "system", "es6", "es2015", "esnext", "none"]
    "lib": ["ES6","DOM","ScriptHost"], //  TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "allowJs": false, // 是否允许编译js文件
    "checkJs": false, // 是否检查和报告js文件中的错误
    "jsx": "preserve", // jsx代码用于的开发环境'preserve', 'react-native', or 'react'
    "jsxFactory": "React.createElement", // 定义 jsx 工厂方法，React.createElement 还是 h
    // "outFile": "../outFile/app.js", // 指定将输出文件合并到一个文件中, 只有设置module的值为amd和system模块时才支持这个配置, 其他报错
    "outDir": "../pdist", // 指定编译结果的输出文件夹 不指定默认输出到当前文件夹下
    "rootDir": "../", // 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译

    /* 模块配置 */
    "moduleResolution": "node", // 指定导入模块解析方式，["classic" : "node"], 若未指定，那么在使用了--module commonjs时的默认值为Node，其它情况时则为Classic
    "baseUrl": "../", // 用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响
    "paths": {
      "@/*": ["src/*"],
    }, // 用于设置模块名称到基于baseUrl的路径映射
    // "rootDirs": [],  // 指定一个路径列表，在构建时编译器会将这个路径列表中的路径的内容都放到一个文件夹中
    // "typeRoots": [],  // 指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载
    // "types": [],  // 用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来
    // "allowSyntheticDefaultImports": true,  // 指定允许从没有默认导出的模块中默认导入
    // "esModuleInterop": true,  // 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 
    // "allowUmdGlobalAccess": true,  // 允许接入全局Umd
    "isolatedModules": false, // 指定是否将每个文件作为单独的模块; 提供 "--isolatedModules" 标志时，所有文件都必须是模块 与outFile不可同时指定

    // 编译配置
    "composite": false, // 是否编译构建引用项目 配合 引用tsconfig的references
    // "incremental": true, // 是否启用增量编译 编译器可以在第一次编译后生成一个可以存储编译信息的文件，在二次编译时会根据这个文件做增量编译，这样就可以提高编译的速度
    // "tsBuildInfoFile": "./tsBuild", // 指定文件用来存储增量编译信息 无法在不指定选项 incremental 或选项 composite 的情况下指定选项 tsBuildInfoFile。
    "removeComments": false, // 指定是否将编译后的文件中的注释删掉
    "noEmit": false, // 不生成编译文件
    "noEmitOnError": false, // 编译出现错误时不输出任何文件
    "importHelpers": false, // 指定是否引入tslib里的辅助工具函数
    "downlevelIteration": true, // 当 target 为 ES5 或 ES3 时，提供对 for..of，解构等语法的支持
    // "preserveSymlinks": true,  // 不把符号链接解析为其真实路径

    /* 严格类型校验配置 */
    "alwaysStrict": false, // 指定始终以严格模式检查每个模块，并且在编译之后的js文件中加入"use strict"字符串，用来告诉浏览器该js为严格模式 默认true
    "strict": false, // 用于指定是否开启所有严格的类型检查 默认false
    "noImplicitAny": false, // 不允许隐式的any类型
    "strictNullChecks": false, // 不允许把null、undefined赋值给其他类型的变量 可以赋值给any
    "strictFunctionTypes": false, // 指定是否使用函数参数双向协变检查
    "strictBindCallApply": false, // 设为true后会对bind、call和apply绑定的方法的参数的检测是严格检测的
    "strictPropertyInitialization": false, // 设为true后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks
    "noImplicitThis": false, // 当this表达式的值为any类型的时候，生成一个错误

    /* 额外校验（语法校验）*/
    "noUnusedLocals": false,  // 用于检查是否有定义了但是没有使用的变量
    "noUnusedParameters": false, // 用于检查是否有在函数体中没有使用的参数
    "noImplicitReturns": false,  // 用于检查函数是否有返回值，设为true后，如果函数没有返回值则会提示
    "noFallthroughCasesInSwitch": false, // 用于检查switch中是否有case没有使用break跳出switch

    /* sourceMap&声明文件 */
    "declaration": false, // 生成ts相应的.d.ts文件     
    "declarationDir": "./dec", // 指定生成的声明文件的地址
    "declarationMap": false, // 指定生成声明文件的sourcemap
    "emitDeclarationOnly": false, // 只生成声明文件，而不会生成js文件//
    "sourceMap": false, // 生成相应的soucerMap文件
    "inlineSourceMap": false, // 指定是否将map文件的内容和js文件编译在同一个js文件中
    "inlineSources": false,  // 将 ts 源码生成到 source map 中，需要同时设置 inlineSourceMap 或 sourceMap
    // "sourceRoot": "", // 指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里
    // "mapRoot": "",  // 指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性

    /* Experimental Options */
    // "experimentalDecorators": true, // 用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库
    // "emitDecoratorMetadata": true, // 给源码里的装饰器声明加上设计类型元数据
    
    /* Advanced Options */
    "forceConsistentCasingInFileNames": true  // 不允许不同变量来代表同一文件
  },
  // "files": [], // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件，如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? ** / 等通配符
  "include": ["./**/*"],  // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如"./src"即表示要编译src文件夹下的所有文件以及子文件夹的文件
  "exclude": ["../pdist"],  // exclude表示要排除的、不编译的文件，它也可以指定一个列表，规则和include一样，可以是文件或文件夹，可以是相对路径或绝对路径，可以使用通配符
  // "extends": "",   // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在3.2版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件
  "compileOnSave": true, // compileOnSave的值是true或false，如果设为true，在我们编辑了项目中的文件保存的时候，编辑器会根据tsconfig.json中的配置重新生成文件，不过这个要编辑器支持
  // "references": [],  // 一个对象数组，指定要引用的项目
}