{
  "compilerOptions": {
    /* Basic Options */
    "target": "ES5", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
    "module": "amd",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
    "lib": ["DOM","ES5","ES6","ES2015","ES2016","ESNext"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array"
    "allowJs": false,                       /* Allow javascript files to be compiled. */
    "checkJs": false,                       /* Report errors in .js files. */
    "jsx": "react",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "outFile": "",  // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD"、"system", 其他报错
    "outDir": "./dist", // 指定编译文件的输出文件夹
    "rootDir": ".", // 指定编译文件的根目录、生成输出文件目录结构
    // "rootDirs": ["./src", "./public"],  // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
    "typeRoots": ["node_modules/@types", "./src/types", ], // 声明文件目录，默认时node_modules/@types
    // "types": ["node"], // 加载的声明文件包
    "baseUrl": ".",  // 解析非相对模块的基地址，默认是当前目录
    "paths": {
      "@/*": ["src/*"],
    },  // 路径映射，相对于baseUrl
    
    /* 严格类型检验配置 */
    "alwaysStrict": true, // 在代码中注入'use strict' module: commonjs 模块导出文件默认加入use strict
    "strict": true, // 开启所有严格的类型检查
    "noImplicitAny": false, // 不允许隐式的any类型
    "strictNullChecks": true, // 不允许把null、undefined赋值给其他类型的变量 可以赋值给any
    "strictFunctionTypes": true, // 指定严格校验函数类型的变量参数类型
    "strictBindCallApply": true,  // 指定严格校验bind/call/apply的参数类型
    "strictPropertyInitialization": true, // 指定类的必选实例属性必须初始化 
    "noImplicitThis": true,  // 不允许this有隐式的any类型
    
    /* 模块解析配置 */
    "moduleResolution": "node",  // 模块解析设置
    "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "esModuleInterop": true,  // 通过为导入内容创建命名空间，允许export=导出，由import a from 'a' 导入 
    "preserveConstEnums": true, // 指定是否保留枚举映射代码 在默认情况下，使用 const 修饰符后，枚举不会生成映射代码
    "downlevelIteration": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
    
    /* declaration sourceMap */
    "declaration": true,  // 指定是否生成声明文件
    // "declarationDir": "./dec", // 指定是否生成声明文件的文件夹目录
    "declarationMap": false, // 指定是否生成声明文件sourceMap
    "emitDeclarationOnly": false, // 只生成声明文件，而不会生成js文件
    "sourceMap": false,  // 与inlineSourceMap互斥
    // "inlineSourceMap": false, // 指定将sourceMap输出到目标文件的js文件中
    // "inlineSources": false,  // 指定是否将ts源码生成到sourceMap的sourcesContent字段，需要同时设置 inlineSourceMap 或 sourceMap
    // "sourceRoot": "../src", // 指定TypeScript源文件的根目录，以便调试器定位
    // "mapRoot": "../dist",  // 为调试器指定map文件的根目录，而不是使用生成时的路径
    
    /* 实验性配置 */
    "experimentalDecorators": true, // 指定是否启用实验性的ES装饰器语法
    "emitDecoratorMetadata": false,  // 指定给源码里的装饰器声明加上设计类型元数据（reflect-metadata）

    /* 额外检查(语法) */
    "noUnusedLocals": false,   // 检查只声明、未使用的局部变量(只提示不报错)
    "noUnusedParameters": false, // 检查未使用的函数参数(只提示不报错)
    "noImplicitReturns": true,   //每个分支都会有返回值
    "noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
    "forceConsistentCasingInFileNames": false,  // 禁止对同一个文件的不一致的引用(文件名大小写)

    /**增量编译*/
    // "composite": true, // 编译编译依赖
    "incremental": false, // 指定是否开启增量编译
    // "tsBuildInfoFile": "./tsBuild", // 指定增量编译生成的文件
    "removeComments": false, // 删除注释
    "noEmit": false, // 不输出文件,即编译后不会生成任何js文件
    "noEmitOnError": false, // 发送错误时不输出任何文件
    "importHelpers": false, // 通过tslib引入helper函数，文件必须是模块
    "newLine":"lf", // 指定生成文件的行结束符： "crlf"（windows）或 "lf"（unix）。
    "listEmittedFiles": false, // 打印输出文件
    "listFiles": false, // 打印编译文件
    "diagnostics": false, // 打印诊断信息
    "traceResolution": false, // 指定是否生成模块解析日志信息
    "preserveSymlinks": false,  // 指定是否不把符号链接解析为其真实路径；将符号链接文件视为真正的文件
    "isolatedModules": false, // 指定是否将每个文件作为单独的模块; 提供 "--isolatedModules" 标志时，所有文件都必须是模块 与outFile不可同时指定
  },
  "include": [
    "./src/**/*",
    "./public/**/*", // 如果编译器发现以rootDir的值作为根目录查找编译文件并不会把所有文件加载进去的话会报错，但是不会停止编译
  ], // 指定需要编译的单个文件或目录
  "exclude": [
    "node_modules",
    "./dist",
    "./dec",
    "./outFile",
    "./config",
  ],
  "references": [{
    "path": "./references",
    "prepend": false, // 使用prepend选项来启用前置某个依赖的输出配合output
  }], // 指定依赖工程
  // "files": ["./src/index.ts"], // 指定待编译的单个文件列表
  // "extends": "./public/tsconfig.json", // 引入其他配置文件继承配置; 在原文件里的配置先被加载，然后被来至继承文件里的配置重写
  "typeAcquisition": {
    "enable": false, // 是否开启自动引入库类型定义文件
    "exclude": ["jquery"], // 允许自动引入的库名
    "include": ["jest"] // 排除的库名
  }, // 设置自动引入库类型定义文件(.d.ts)相关
}
